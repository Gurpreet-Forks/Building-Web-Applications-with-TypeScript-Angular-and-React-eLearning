{"version":3,"sources":["server/user.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,qCAMkB;AAGlB,uCAAiD;AAQjD,SAAS,eAAe,CAAC,QAAgB,EAAE,QAAgB;IAC1D,OAAO,MAAM;SACX,UAAU,CAAC,QAAQ,CAAC;SACpB,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC;SACzD,MAAM,CAAC,KAAK,CAAC,CAAC;AACjB,CAAC;AAED,kBAAkB;AAClB,mBAAmB;AACnB,sBAAsB;AACtB,mDAAmD;AACnD,MAAM;AACN,kBAAkB;AAClB,mBAAmB;AACnB,oBAAoB;AACpB,+CAA+C;AAC/C,MAAM;AAEN,SAAsB,KAAK,CAC1B,OAAsB,EACtB,OAAgB;;;;;;oBAEV,QAAQ,GAAG,mBAAQ,CAAC,MAAM,CAC/B,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,EACzB,mBAAQ,CAAC,QAAQ,CACjB,CAAC;oBACI,QAAQ,GAAG,mBAAQ,CAAC,MAAM,CAC/B,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,EACzB,mBAAQ,CAAC,QAAQ,CACjB,CAAC;oBACI,YAAY,GAAG,eAAe,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAEzC,qBAAM,eAAI,CAAC,gBAAK,EAAE,EAAE,QAAQ,UAAA,EAAE,YAAY,cAAA,EAAE,CAAC,EAAA;;oBAAvD,OAAO,GAAG,SAA6C;oBAC7D,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;wBACzB,sBAAO,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,gCAAgC,EAAE,EAAC;qBAChE;oBACK,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBACxB,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;oBAC1B,sBAAO,EAAE,EAAE,EAAE,IAAI,EAAE,EAAC;;;;CACpB;AArBD,sBAqBC;AACD,SAAgB,MAAM,CAAC,OAAsB,EAAE,OAAgB;IAC9D,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;IAC3B,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;AACrB,CAAC;AAHD,wBAGC;AACD,SAAsB,OAAO,CAAC,OAAgB;;;;;;oBAC7C,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS;wBAAE,sBAAO,SAAS,EAAC;oBACnC,qBAAM,eAAI,CAAC,gBAAK,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,EAAA;;oBAApD,OAAO,GAAG,SAA0C;oBAC1D,sBAAO,OAAO,CAAC,CAAC,CAAC,EAAC;;;;CAClB;AAJD,0BAIC;AACD,SAAsB,cAAc,CAAC,OAAgB;;;;;wBACvC,qBAAM,OAAO,CAAC,OAAO,CAAC,EAAA;;oBAA7B,IAAI,GAAG,SAAsB;oBACnC,IAAI,IAAI,KAAK,SAAS,EAAE;wBACvB,MAAM,IAAI,sBAAW,CAAC,qBAAU,CAAC,uBAAuB,CAAC,CAAC;qBAC1D;oBACD,sBAAO,IAAI,EAAC;;;;CACZ;AAND,wCAMC","file":"user.js","sourcesContent":["import * as crypto from \"crypto\";\nimport { ObjectID } from \"mongodb\";\nimport {\n\tServerRequest,\n\tServerResponse,\n\tServerError,\n\tStatusCode,\n\tvalidate\n} from \"phaethon\";\nimport { Session } from \"./index\";\nimport { LoginResult } from \"../shared/api\";\nimport { users, find, insert } from \"./database\";\n\nexport interface User {\n\t_id: ObjectID;\n\tusername: string;\n\tpasswordHash: string;\n}\n\nfunction getPasswordHash(username: string, password: string): string {\n\treturn crypto\n\t\t.createHash(\"sha256\")\n\t\t.update(password.length + \"-\" + username + \"-\" + password)\n\t\t.digest(\"hex\");\n}\n\n// insert(users, {\n// \t_id: undefined,\n// \tusername: \"lorem\",\n// \tpasswordHash: getPasswordHash(\"lorem\", \"ipsum\")\n// });\n// insert(users, {\n// \t_id: undefined,\n// \tusername: \"foo\",\n// \tpasswordHash: getPasswordHash(\"foo\", \"bar\")\n// });\n\nexport async function login(\n\trequest: ServerRequest,\n\tsession: Session\n): Promise<LoginResult> {\n\tconst username = validate.expect(\n\t\trequest.query[\"username\"],\n\t\tvalidate.isString\n\t);\n\tconst password = validate.expect(\n\t\trequest.query[\"password\"],\n\t\tvalidate.isString\n\t);\n\tconst passwordHash = getPasswordHash(username, password);\n\n\tconst results = await find(users, { username, passwordHash });\n\tif (results.length === 0) {\n\t\treturn { ok: false, message: \"Username or password incorrect\" };\n\t}\n\tconst user = results[0];\n\tsession.userId = user._id;\n\treturn { ok: true };\n}\nexport function logout(request: ServerRequest, session: Session): LoginResult {\n\tsession.userId = undefined;\n\treturn { ok: true };\n}\nexport async function getUser(session: Session) {\n\tif (session.userId === undefined) return undefined;\n\tconst results = await find(users, { _id: session.userId });\n\treturn results[0];\n}\nexport async function getUserOrError(session: Session) {\n\tconst user = await getUser(session);\n\tif (user === undefined) {\n\t\tthrow new ServerError(StatusCode.ClientErrorUnauthorized);\n\t}\n\treturn user;\n}\n"]}